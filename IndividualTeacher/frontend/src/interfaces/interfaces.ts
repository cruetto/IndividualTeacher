// frontend/src/interfaces/interfaces.ts

export interface AnswerOption {
    id: string; // Unique identifier for the answer option (UUID)
    answer_text: string;
    is_correct: boolean;
}

export interface Question {
    id: string; // Unique identifier for the question (UUID)
    question_text: string;
    type: 'multiple_choice'; // Or other types if you expand
    answers: AnswerOption[];
}

export interface QuizData {
    id: string; // Unique identifier for the quiz (UUID generated by backend)
    title: string;
    topic?: string; // Topic used for AI generation (optional)
    questions: Question[];
    userId?: string | null; // Optional: ID of the user who owns the quiz (null if public)
    // Add other metadata like createdAt, updatedAt if sent by backend
}

// --- Frontend-specific types (often derived) ---

// For Quiz component internal state and communication with App
export interface DisplayAnswer extends AnswerOption { originalIndex: number; }
export interface DisplayQuestion extends Omit<Question, 'answers'> {
    originalIndex: number;
    answers: DisplayAnswer[];
}

// For user info state in App
export interface User {
    id: string; // MongoDB ObjectId as string
    email: string;
    name: string;
    picture?: string;
}

// For storing user answers across quizzes
export type AllUserAnswers = Record<string, number[]>; // key: quizId, value: array of originalAnswerIndex

// For chat context
export interface ChatContext {
    quizTitle?: string;
    questionText?: string;
    options?: string[];
    isReviewMode?: boolean;
    userAnswerText?: string | null; // null if skipped
    correctAnswerText?: string;
    wasCorrect?: boolean;
}